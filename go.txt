一：
	当然，出现在:=左侧的变量不应该是已经被声明过的，否则会导致编译错误，比如下面这个写法：
	var i int
	i := 2
	会导致类似如下的编译错误：
	no new variables on left side of :=

二：
	Go语言的变量赋值与多数语言一致，但Go语言中提供了C/C++程序员期盼多年的多重赋值功能，比如下面这个交换i和j变量的语句：
	i, j = j, i

三：
	假 设 GetName() 函 数 的 定 义 如 下 ， 它 返 回 3 个 值 ， 分 别 为firstName 、 lastName 和nickName：
	func GetName() (firstName, lastName, nickName string) {
		return "May", "Chan", "Chibi Maruko"
	}
	若只想获得nickName，则函数调用语句可以用如下方式编写：
	_, _, nickName := GetName()

四：
	Go的常量定义可以限定常量类型，但不是必需的。如果定义常量时没有指定类型，那么它
	与字面常量一样，是无类型常量。
	常量定义的右值也可以是一个在编译期运算的常量表达式，比如
	const mask = 1 << 3
	由于常量的赋值是一个编译期行为，所以右值不能出现任何需要运行期才能得出结果的表达
	式，比如试图以如下方式定义常量就会导致编译错误：
	const Home = os.GetEnv("HOME")
	原因很简单， os.GetEnv()只有在运行期才能知道返回结果，在编译期并不能确定，所以
	无法作为常量定义的右值。	

五：
	Go编译器支持UTF-8的源代码文件格式。这意味着源代码中的字符串可以包含非ANSI的字
	符，比如“ Hello world. 你好，世界！”可以出现在Go代码中。但需要注意的是，如果你的Go代
	码需要包含非ANSI字符，保存源文件时请注意编码格式必须选择UTF-8。特别是在Windows下一
	般编辑器都默认存为本地编码，比如中国地区可能是GBK编码而不是UTF-8，如果没注意这点在
	编译和运行时就会出现一些意料之外的情况。	